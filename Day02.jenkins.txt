* jenkins 2일차 수업 내용

CICD 공부

1) jenkins를 이용한 빌드
- 스크립트 업데이트 마다 새롭게 빌드 해야 함

- 스크립트 내 sh 코드 : 실행을 위한 작업 코드

- 파이프라인 오버뷰 메뉴를 통해 각 빌드 현황을 확인할 수 있음

- 빌드 성공된 이미지 파일
ex) /home/ubuntu/.jenkins/workspace/cicd_member/target/memberapp-0.0.1-SNAPSHOT.jar.original
파일 위치 : target
파일 명 : sts에서 패키지 생성 당시 작성한 'artifactId-version'
확장자 : jar

- 생성된 파일 수동으로 실행시키기 (애플리케이션이 실행됨)
java -jar '파일명'


2) 빌드 테스트
- sh "./mvnw test" :  ./mvnw 파일에 test 하기
- sts4 에서 test 코드짜서 test 하기

3) 도커 파일
도커 이미지 생성을 위한 파일 작성

// 베이스 이미지
FROM openjdk:17-jdk

// 변수 설정
ARG VERSION
ARG JAR_FILE=target/memberapp-0.0.1-SNAPSHOT.jar

// 라벨 달기
LABEL maintainer="SuJeong Lee<oeoroeor123@naver.com>" \
			title="Member App" \
			description="This is member service image" \
			version="$VERSION"

// ec2에 있는 jar 파일을 container로 복사 (실행을 위해)	
COPY $JAR_FILE memberapp.jar

// 도커파일 내 9090 포트를 사용
EXPOSE 9090

// 실행 코드
ENTRYPOINT ["java"]
CMD ["-jar", "memberapp.jar"]


4) jenkins 안에서 이미지 빌드 처리하기
(도커 이미지 뒤에 버전은 변수 처리하기)
dockerTag와 docker image는 문자열 처리 상태임, 부를때 "" 없이 사용

pipeline {
    agent any
    environment {
        dockerTag = "${NOW}_${BUILD_ID}"
        dockerImage = "oeoroeor123/cicd_member:${dockerTag}"
    }


stage("Docker Image Build") {
            steps {
                script {
                    oDockImage = docker.build(dockerImage, "--build-arg VERSION = ${dockerTag} -f Dockerfile .")
                }
            }
        }

5) jenkins로 만든 도커 이미지 푸쉬

① jenkins > 대시보드 > jenkins 관리 > Credentials
Domains > 새로 만들기 > 내용 삽입 (* id가 Credentials 이름)

② docker image inspect oeoroeor123/cicd_member:20250204144436_17
만든 이미지 상세로 들어가기

③ jenkins 스크립트 작성

stage("Docker Image Push") {
            steps {
                script {
                 // sh "docker image build -t ${dockerImage} --build -arg VERSION=${dockerTag} -f Dockerfile ."
                    docker.withRegistry("", "DockerHub_Credential") {
                        oDockImage.push()
                    }
                }
            }
        }

6) jump host
jenkins와 staging 서버를 이용한 방법

①  staging 서버를 통해 docker contianer를 강제 종료 후, 새롭게 생성함
변수는 총 5개 이며, sts4의 application.properties에서 변수 처리한 값을 지정함
stage("Deploy") {
            steps {
                sshagent(credentials: ["Staging_Credential"]) {
                    sh "ssh -o StrictHostKeyChecking=no ubuntu@172.31.0.100 docker rm -f memberapp-container"
                    sh "ssh -o StrictHostKeyChecking=no ubuntu@172.31.0.100 docker run -d --name memberapp-container -p 9090:8080 -e MYSQL_IP=3.34.207.181 -e MYSQL_PORT=3306 -e MYSQL_DATABASE=db_cicd_member -e MYSQL_USERNAME=greenit -e MYSQL_PASSWORD=greenit ${dockerImage}"
                }
            }
        }

② ec2에서 docker ps -a를 통해 container 생성 여부를 파악함 (* jenkins는 계속 돌아가는 상태)

③ staging 인스턴스의 퍼블릭 ip와 Dockerfile에서 사전에 expose로 지정한 포트번호로 브라우저에 접속하여 확인
이때, 돌아가지 않는다면 체크할 2가지 !
- 인스턴스에서 지정한 보안그룹에 포트번호가 설정되어 있는지
- staging에서 container 생성 시 포트번호가 잘 설정되어 있는지  (* -p 옵션은 호스트 포트:컨테이너 포트 형식으로 사용)
ex) http://43.203.241.136:9090
